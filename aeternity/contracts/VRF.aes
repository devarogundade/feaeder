@compiler >= 6

include "Option.aes"
include "String.aes"
include "./interfaces/IFeaeder.aes"
include "./interfaces/IVRFReceiver.aes"

contract VRF =
    // ============== STATE/STORAGE ============== //

    record state = {
        relayer: address,
        last_request_id: int,
        feaeder: IFeaeder,
        query_fee: int
        }

    // ============== EVENTS ============== //

    datatype event =
        RandomNumberRequested(int, address)
        | RandomNumberFulfilled(int)

    // ============== INIT FUNCTION ============== //

    stateful entrypoint init( feaeder: IFeaeder,
                              query_fee: int
                            ) = { relayer = Call.caller
                                , last_request_id = 0
                                , feaeder = feaeder
                                , query_fee = query_fee
                                }

    // ============== MUTATIVE FUNCTIONS ============== //

    stateful entrypoint request_random_number( subscription_id: int
                                             ) =
        state.feaeder.use_subscription(
            subscription_id,
            Call.caller,
            state.query_fee
            )
            
        let sender : address = Call.caller

        let request_id = state.last_request_id + 1
        
        put(state { last_request_id = request_id })
        
        Chain.event(RandomNumberRequested(request_id, sender))

        request_id


    stateful entrypoint fulfill_random_number( request_id: int,
                                               receiver: IVRFReceiver,
                                               random_number: int
                                             ) =
        require_relayer()

        receiver.fulfill_random_number(request_id, random_number)

        Chain.event(RandomNumberFulfilled(request_id))

    // ============== STATE VIEW FUNCTIONS ============== //

    entrypoint get_address(): address = Contract.address

    // ============== STATE VIEW FUNCTIONS ============== //

    entrypoint get_request_fees(): int = state.query_fee 

    entrypoint get_state(): state = state

    // ============== MODIFIERS ============== //

    function require_relayer() =
        require(Call.caller == state.relayer, "ONLY_RELAYER_ALLOWED")