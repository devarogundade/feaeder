@compiler >= 6

include "List.aes"

contract Feaeder =
  record state = {
    controller: address,   
    subscriptions: map(int, subscription),
    subscription_owners: map(address, int),
    last_subscription_id: int,
    version: int,
    allowed_contracts: list(address)
    }

  record subscription = {
    id: int,
    creator: address,
    timestamp: int,
    version: int,
    balance: int,
    spent: int,
    consumers: list(address)
    }

  datatype event =
    SubscriptonCreated(address, int) |
    SubscriptonTopup(int, int) |
    SubscriptonWithdrawn(int, int) |
    SubscriptonUsed(int, int) |
    ConsumerAdded(int, address) |
    ConsumerRemoved(int, address)

  stateful entrypoint init(version: int) = { controller = Call.caller
                                           , subscriptions = {}
                                           , subscription_owners = {}
                                           , last_subscription_id = 0
                                           , version = version
                                           , allowed_contracts = [] }

  stateful entrypoint create_subscription() =
    let sender = Call.caller

    require(!Map.member(sender, state.subscription_owners), "ALREADY_CREATED")

    let subscription_id = state.last_subscription_id + 1

    put(state { subscriptions[subscription_id] = { id = subscription_id
              , creator = sender
              , timestamp = Chain.timestamp
              , version = state.version
              , balance = 0
              , spent = 0
              , consumers = []} })

    put(state { subscription_owners[sender] = subscription_id 
              })

    put(state { last_subscription_id = subscription_id 
              })

    Chain.event(SubscriptonCreated(sender, subscription_id))

  payable stateful entrypoint topup_subscrption() =
    let amount = Call.value
    require(amount > 0, "ZERO_AMOUNT")

    let sender = Call.caller

    require(Map.member(sender, state.subscription_owners), "NO_SUBSCRIPTION")
    
    let subscription_id = state.subscription_owners[sender]
    let subscription = state.subscriptions[subscription_id]

    let new_balance = subscription.balance + amount

    put(state { subscriptions[subscription_id].balance = new_balance
              })

    Chain.event(SubscriptonTopup(subscription_id, amount))

  stateful entrypoint withdraw_subscription(amount: int) =
    require(amount > 0, "ZERO_AMOUNT")

    let sender = Call.caller

    require(Map.member(sender, state.subscription_owners), "NO_SUBSCRIPTION")
    
    let subscription_id = state.subscription_owners[sender]
    let subscription = state.subscriptions[subscription_id]

    require(amount =< subscription.balance, "INSUFFICIENT_BALANCE")

    let new_balance = subscription.balance - amount

    put(state { subscriptions[subscription_id].balance = new_balance
              })

    Chain.spend(sender, amount)

    Chain.event(SubscriptonWithdrawn(subscription_id, amount))

  stateful entrypoint use_subscription( subscription_id: int
                                      , consumer: address
                                      , cost: int
                                      ) : bool =
    require_allowed_contract()

    let subscription = state.subscriptions[subscription_id]

    require(List.contains(consumer, subscription.consumers), "UNAUTHORIZED")
    require(subscription.balance >= cost, "INSUFFICIENT_BALANCE")

    let new_balance = subscription.balance - cost
    let new_spent = subscription.spent + cost

    put(state { subscriptions[subscription_id].balance = new_balance
              })

    put(state { subscriptions[subscription_id].spent = new_spent
              })

    Chain.event(SubscriptonUsed(subscription_id, cost))

    true

  stateful entrypoint add_consumer(consumer: address) =
    let sender = Call.caller

    require(Map.member(sender, state.subscription_owners), "NO_SUBSCRIPTION")
    
    let subscription_id = state.subscription_owners[sender]
    let subscription = state.subscriptions[subscription_id]

    let consumers = List.insert_at(0, consumer, subscription.consumers)
    
    put(state{ subscriptions[subscription_id].consumers = consumers
             })

    Chain.event(ConsumerAdded(subscription_id, consumer))

  stateful entrypoint remove_consumer(old_consumer: address) =
    let sender = Call.caller

    require(Map.member(sender, state.subscription_owners), "NO_SUBSCRIPTION")
    
    let subscription_id = state.subscription_owners[sender]
    let subscription = state.subscriptions[subscription_id]

    let consumers = List.filter((consumer) => old_consumer != consumer 
                               , subscription.consumers)
    
    put(state{ subscriptions[subscription_id].consumers = consumers
             })

    Chain.event(ConsumerRemoved(subscription_id, old_consumer))

  stateful entrypoint add_allowed_contract(new_allowed_contract: address) =
    require_controller()

    require(!List.contains(new_allowed_contract, state.allowed_contracts), "ALREADY_ADDED")

    let new_allowed_contracts = List.insert_at(0
                                              , new_allowed_contract
                                              , state.allowed_contracts)

    put(state { allowed_contracts = new_allowed_contracts 
              })

  stateful entrypoint remove_allowed_contract(old_allowed_contract: address) =
    require_controller()

    require(List.contains(old_allowed_contract, state.allowed_contracts), "NOT_EXISTS")

    let new_allowed_contracts = List.filter((allowed_contract) => old_allowed_contract != allowed_contract
                                           , state.allowed_contracts)

    put(state { allowed_contracts = new_allowed_contracts 
              })

  stateful entrypoint withdraw_admin(receiver: address, amount: int) =
    require_controller()

    Chain.spend(receiver, amount)

  entrypoint get_subscription_id(owner: address) = state.subscription_owners[owner]

  entrypoint get_subscription(subscription_id: int) = state.subscriptions[subscription_id]

  entrypoint get_owner_subscription(owner: address) =
    let subscription_id = state.subscription_owners[owner]
    state.subscriptions[subscription_id]

  private function require_controller() =
    require(Call.caller == state.controller, "UNAUTHORIZED_CALLER")

  private function require_allowed_contract() =
    require(List.contains(Call.caller, state.allowed_contracts), "UNAUTHORIZED_CALLER")